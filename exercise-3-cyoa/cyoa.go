package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"os"
)

// Generated by https://quicktype.io
type PageFormat struct {
	Title   string   `json:"title"`
	Story   []string `json:"story"`
	Options []Option `json:"options"`
}

type Option struct {
	Text string `json:"text"`
	Arc  string `json:"arc"`
}

func readFile(filePath string) ([]byte, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return nil, fmt.Errorf("readFile: failed to open file: %w", err)
	}

	defer file.Close()

	buffer := new(bytes.Buffer)
	_, err = buffer.ReadFrom(file)
	if err != nil {
		return nil, fmt.Errorf("readFile: failed to parse file: %w", err)
	}

	return buffer.Bytes(), nil
}

func main() {
	// initialize flags
	filePath := flag.String("i", "./gopher.json", "accepts relative or absolute paths to a json file")
	flag.Parse()

	// read json file
	jsonBytes, err := readFile(*filePath)
	if err != nil {
		fmt.Printf("failed opening or parsing file: %s \n", err)
		return
	}

	// unmarshal using a generic interface
	var jsonFormat interface{}
	err = json.Unmarshal(jsonBytes, &jsonFormat)
	if err != nil {
		fmt.Printf("failed to unmarshal using a generic interface: %s \n", err)
		return
	}

}
