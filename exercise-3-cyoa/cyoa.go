package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"os"

	"github.com/kr/pretty"
)

func main() {
	// initialize flags
	filePath := flag.String("i", "./gopher.json", "accepts relative or absolute paths to a json file")
	flag.Parse()

	file, err := os.Open(*filePath)
	if err != nil {
		fmt.Printf("failed to open file: %v", err)
		return
	}

	defer file.Close()

	content, err := readStory(file)
	if err != nil {
		fmt.Printf("failed to decode file: %v", err)
		return
	}

	fmt.Printf("%# v\n", pretty.Formatter(content))
}

func readStory(reader io.Reader) (storyFormat, error) {
	data := json.NewDecoder(reader)
	var content storyFormat
	if err := data.Decode(&content); err != nil {
		return nil, fmt.Errorf("readStory: failed to decode into struct: %w", err)
	}

	return content, nil
}

type storyFormat map[string]Chapter

// Generated by https://quicktype.io
type Chapter struct {
	Title      string   `json:"title"`
	Paragraphs []string `json:"story"`
	Options    []Option `json:"options"`
}

type Option struct {
	Text    string `json:"text"`
	Chapter string `json:"arc"`
}
